# üß™ Test Unitarios para el Pipeline de Datos

## üìå **Objetivo**
Garantizar la calidad y el correcto funcionamiento del pipeline mediante la ejecuci√≥n de test unitarios en las funciones clave. Esto asegura que cada m√≥dulo individual funcione como se espera y facilita la detecci√≥n temprana de errores.

---
## üõ†Ô∏è **√Åreas de Prueba**
Los test unitarios cubren las siguientes √°reas clave del pipeline:

| **M√≥dulo**                 | **Descripci√≥n del Test**                                    |
|----------------------------|-------------------------------------------------------------|
| Extracci√≥n de datos         | Verifica la conexi√≥n y respuesta de la API.                  |
| Limpieza y deduplicaci√≥n   | Asegura que no existan registros duplicados y que se eliminen columnas innecesarias. |
| An√°lisis de palabras clave | Comprueba la correcta extracci√≥n de las palabras m√°s frecuentes. |
| Clasificaci√≥n de art√≠culos  | Verifica la asignaci√≥n correcta de categor√≠as (`Launch`, `Rocket`, `Space`). |
| Carga a BigQuery           | Asegura que el esquema de datos sea compatible y la carga se realice sin errores. |

---
## üßë‚Äçüíª **Ejemplos de Test Unitarios**

### 1Ô∏è‚É£ **Test de Extracci√≥n de Datos**
```python
import unittest
import requests

class TestDataExtraction(unittest.TestCase):
    def test_api_response(self):
        response = requests.get("https://api.spaceflightnewsapi.net/v4/articles")
        self.assertEqual(response.status_code, 200, "La API no responde correctamente.")

if __name__ == '__main__':
    unittest.main()
```
**Descripci√≥n:** Verifica que la API responda con un c√≥digo `200` (OK).

---
### 2Ô∏è‚É£ **Test de Limpieza y Deduplicaci√≥n**
```python
import unittest
from pyspark.sql import SparkSession

class TestDataCleaning(unittest.TestCase):
    def setUp(self):
        self.spark = SparkSession.builder.appName("TestCleaning").getOrCreate()
        self.data = [(1, "Article 1"), (1, "Article 1"), (2, "Article 2")]
        self.df = self.spark.createDataFrame(self.data, ["id", "title"])

    def test_remove_duplicates(self):
        cleaned_df = self.df.dropDuplicates(["id"])
        self.assertEqual(cleaned_df.count(), 2, "Eliminaci√≥n de duplicados fallida.")

if __name__ == '__main__':
    unittest.main()
```
**Descripci√≥n:** Verifica que el proceso de limpieza elimine correctamente los registros duplicados.

---
### 3Ô∏è‚É£ **Test de Clasificaci√≥n de Art√≠culos**
```python
import unittest
from classify import classify_article  # Supongamos que esta funci√≥n clasifica art√≠culos

class TestClassification(unittest.TestCase):
    def test_classification(self):
        self.assertEqual(classify_article("This is a rocket launch"), "Launch", "Clasificaci√≥n incorrecta.")
        self.assertEqual(classify_article("Space mission to Mars"), "Space", "Clasificaci√≥n incorrecta.")

if __name__ == '__main__':
    unittest.main()
```
**Descripci√≥n:** Verifica que la funci√≥n de clasificaci√≥n asigne la categor√≠a correcta.

---
## üì¶ **Estrategia de Ejecuci√≥n**
1. **Automatizaci√≥n:** Los test unitarios se ejecutan autom√°ticamente en cada nueva versi√≥n del pipeline utilizando un sistema de integraci√≥n continua (CI/CD).
2. **Frecuencia:** Ejecuci√≥n diaria o en cada cambio significativo en el c√≥digo.
3. **Resultados:** Los resultados se registran y notifican al equipo.

---
## ‚úÖ **Conclusi√≥n**
Los test unitarios son una parte esencial para mantener la calidad del pipeline de datos. Detectan errores tempranamente, aseguran la estabilidad del sistema y facilitan el mantenimiento a largo plazo.


